// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentExamPracticeBE.DataAccess;

#nullable disable

namespace StudentExamPracticeBE.DataAccess.Migrations
{
    [DbContext(typeof(StudentDbContext))]
    [Migration("20230807070652_initDB")]
    partial class initDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("StudentExamPracticeBE.Domain.ExamTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ExamTasks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("817e3ded-3c2d-43e6-80e1-24781180f6f5"),
                            Description = "Efectuare comparatii pentru a sorta n elemente",
                            Status = "Created",
                            Title = "Quicksort"
                        },
                        new
                        {
                            Id = new Guid("1b14d474-287f-44b5-81bd-36b698a8f78b"),
                            Description = "Parcurge in mod repetat lista element cu element comparand cu precedentul",
                            Status = "Created",
                            Title = "BubbleSort"
                        },
                        new
                        {
                            Id = new Guid("cc316902-a7f5-4da2-901b-f6d847a8590a"),
                            Description = "Creati 3 clase respectand principiile OOP.",
                            Status = "Created",
                            Title = "OOP design"
                        });
                });

            modelBuilder.Entity("StudentExamPracticeBE.Domain.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0945c332-c3dd-4e9d-abc6-b1337e30e3c5"),
                            EmailAddress = "neamtuandrei26@yahoo.com",
                            FirstName = "Andrei",
                            LastName = "Neamtu"
                        },
                        new
                        {
                            Id = new Guid("b5106a05-3d90-4691-b482-c21c85d93f1c"),
                            EmailAddress = "motoc212@yahoo.com",
                            FirstName = "Gabriel",
                            LastName = "Motoc"
                        },
                        new
                        {
                            Id = new Guid("7398dc1d-a056-4388-b6ce-7eae860d6ea7"),
                            EmailAddress = "vlad.lupu@gmail.com",
                            FirstName = "Vlad",
                            LastName = "Lupu"
                        },
                        new
                        {
                            Id = new Guid("d34750a9-ae0d-4197-a118-6eb7adeed2a5"),
                            EmailAddress = "mihnea.sanda@gmail.com",
                            FirstName = "Mihnea",
                            LastName = "Sanda"
                        },
                        new
                        {
                            Id = new Guid("a2b49aec-9851-4f84-a940-ca326b307e8b"),
                            EmailAddress = "dicu_aurel9@yahoo.com",
                            FirstName = "Aurel",
                            LastName = "Dicu"
                        },
                        new
                        {
                            Id = new Guid("3d92abb1-ad65-4a62-a46b-abce2e32c91c"),
                            EmailAddress = "ionescu@gmail.com",
                            FirstName = "Andrei",
                            LastName = "Ionescu"
                        },
                        new
                        {
                            Id = new Guid("c3a457b0-aa56-4ea4-9759-fc0b8e5aef27"),
                            EmailAddress = "tonceamihai99@yahoo.com",
                            FirstName = "Mihai",
                            LastName = "Toncea"
                        },
                        new
                        {
                            Id = new Guid("d15675d4-031b-4a7a-b6f9-9b2a32a315f5"),
                            EmailAddress = "anitaclaudiu@gmail.com",
                            FirstName = "Claudiu",
                            LastName = "Anita"
                        },
                        new
                        {
                            Id = new Guid("0419bc13-75ef-418d-a685-595377a15df4"),
                            EmailAddress = "andrei89@yahoo.com",
                            FirstName = "Majon",
                            LastName = "Andrei"
                        },
                        new
                        {
                            Id = new Guid("a80e6beb-4d15-4418-a0a3-0fee512e43c1"),
                            EmailAddress = "baranescu@yahoo.com",
                            FirstName = "Andrei",
                            LastName = "Baranescu"
                        });
                });

            modelBuilder.Entity("StudentTask", b =>
                {
                    b.Property<Guid>("ExamTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ExamTaskId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentTask");

                    b.HasData(
                        new
                        {
                            ExamTaskId = new Guid("817e3ded-3c2d-43e6-80e1-24781180f6f5"),
                            StudentId = new Guid("0945c332-c3dd-4e9d-abc6-b1337e30e3c5")
                        },
                        new
                        {
                            ExamTaskId = new Guid("1b14d474-287f-44b5-81bd-36b698a8f78b"),
                            StudentId = new Guid("0945c332-c3dd-4e9d-abc6-b1337e30e3c5")
                        },
                        new
                        {
                            ExamTaskId = new Guid("cc316902-a7f5-4da2-901b-f6d847a8590a"),
                            StudentId = new Guid("0945c332-c3dd-4e9d-abc6-b1337e30e3c5")
                        },
                        new
                        {
                            ExamTaskId = new Guid("817e3ded-3c2d-43e6-80e1-24781180f6f5"),
                            StudentId = new Guid("b5106a05-3d90-4691-b482-c21c85d93f1c")
                        },
                        new
                        {
                            ExamTaskId = new Guid("cc316902-a7f5-4da2-901b-f6d847a8590a"),
                            StudentId = new Guid("b5106a05-3d90-4691-b482-c21c85d93f1c")
                        },
                        new
                        {
                            ExamTaskId = new Guid("1b14d474-287f-44b5-81bd-36b698a8f78b"),
                            StudentId = new Guid("7398dc1d-a056-4388-b6ce-7eae860d6ea7")
                        },
                        new
                        {
                            ExamTaskId = new Guid("1b14d474-287f-44b5-81bd-36b698a8f78b"),
                            StudentId = new Guid("d34750a9-ae0d-4197-a118-6eb7adeed2a5")
                        },
                        new
                        {
                            ExamTaskId = new Guid("cc316902-a7f5-4da2-901b-f6d847a8590a"),
                            StudentId = new Guid("a2b49aec-9851-4f84-a940-ca326b307e8b")
                        },
                        new
                        {
                            ExamTaskId = new Guid("cc316902-a7f5-4da2-901b-f6d847a8590a"),
                            StudentId = new Guid("3d92abb1-ad65-4a62-a46b-abce2e32c91c")
                        },
                        new
                        {
                            ExamTaskId = new Guid("cc316902-a7f5-4da2-901b-f6d847a8590a"),
                            StudentId = new Guid("c3a457b0-aa56-4ea4-9759-fc0b8e5aef27")
                        },
                        new
                        {
                            ExamTaskId = new Guid("817e3ded-3c2d-43e6-80e1-24781180f6f5"),
                            StudentId = new Guid("d15675d4-031b-4a7a-b6f9-9b2a32a315f5")
                        },
                        new
                        {
                            ExamTaskId = new Guid("1b14d474-287f-44b5-81bd-36b698a8f78b"),
                            StudentId = new Guid("0419bc13-75ef-418d-a685-595377a15df4")
                        });
                });

            modelBuilder.Entity("StudentTask", b =>
                {
                    b.HasOne("StudentExamPracticeBE.Domain.ExamTask", null)
                        .WithMany()
                        .HasForeignKey("ExamTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentExamPracticeBE.Domain.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
